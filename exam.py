# -*- coding: utf-8 -*-
"""exam.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Bmu9xWYSTeVnHqz3HUVNpnGW73BTgqTJ
"""

class Exam:
    def __init__(self, duration, path_to_dir, shuffle=False):
        self.duration = duration
        self.path_to_dir = path_to_dir
        self.shuffle = shuffle
        self.exam_status = False
        self.questions = []
        self.name = ""

    def set_name(self):
        directory_name = os.path.basename(os.path.normpath(self.path_to_dir))
        self.name = directory_name.replace(" ", "_")

    def get_name(self):
        return self.name.replace("_", " ").upper()

    def set_exam_status(self):
        self.exam_status = bool(self.questions)

    def set_duration(self, duration):
        if isinstance(duration, int) and duration > 0:
            self.duration = duration

    def set_questions(self, questions):
        if not isinstance(questions, list):
            return False

        # Check for validity of questions list
        if len(questions) < 1 or questions[-1].qtype != 'end':
            print("End marker missing or invalid.")
            return False

        for q in questions:
            if q.qtype != 'end':
                if not q.description or not q.correct_answer:
                    print("Description or correct answer missing.")
                    return False

                if q.qtype in ['single', 'multiple']:
                    if not q.answer_options or len(q.answer_options) != 4:
                        print("Answer options incorrect quantity.")
                        return False
                elif q.qtype == 'short':
                    if q.answer_options:
                        print("Answer options should not exist.")

        self.questions = questions
        self.set_exam_status()  # Exam is considered setup only if there are valid questions
        return True
# -*- coding: utf-8 -*-
"""program.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IyNg0lluby6K52v63qIgc4eSuARoiwXL
"""

import sys
import os
import csv
from exam import Exam
from setup import extract_questions
from program_one import setup_exam
from program_two import assign_exam

def is_valid_sid(sid, students_file):
    # Read the students.csv file and check if the SID exists in the records
    with open(students_file, 'r', newline='') as csvfile:
        reader = csv.DictReader(csvfile, delimiter='\t')
        for row in reader:
            if row['SID'] == sid:
                return True
    return False

def get_candidate_name(sid, students_file):
    # Read the students.csv file and find the candidate's name
    with open(students_file, 'r', newline='') as csvfile:
        reader = csv.DictReader(csvfile, delimiter='\t')
        for row in reader:
            if row['SID'] == sid:
                return row['Name']
    return None

def main(args):
    if len(args) < 2:
        print("Directory path argument is missing")
        return

    directory_path = args[1]

    # Check if questions.txt and students.csv files are present in the directory
    if "questions.txt" not in os.listdir(directory_path) or "students.csv" not in os.listdir(directory_path):
        print("Missing files")
        return

    students_file = os.path.join(directory_path, "students.csv")

    # Attempt to set up the exam
    exam = Exam(duration,directory)
    questions_file = os.path.join(directory_path, "questions.txt")
    exam, status = setup_exam(exam, questions_file)

    if status:
        print("Setting up exam...")
        print("Exam is ready.")
        print("Do you want to preview the exam [Y|N]?")
        user_response = input().strip().lower()
        if user_response == 'y':
            exam.preview_exam()

        # Assign exam to candidates
        assigned_candidates = assign_exam(exam)

        if assigned_candidates:
            for candidate in assigned_candidates:
                print(f"Candidate: {candidate.name} ({candidate.sid})")
                print(f"Assigned Exam: {candidate.exam.name}")

        # Continue with the exam administration
        attempts = 0

        while attempts < 3:
            print("Enter your student identification number (SID) to start the exam:")
            sid = input().strip()

            if not is_valid_sid(sid, students_file):
                print("Invalid SID.")
                continue

            # Check if the SID is found in the candidate list
            if not exam.has_candidate(sid):
                print("Candidate number not found for exam.")
                while True:
                    print("Do you want to try again [Y|N]?")
                    user_response = input().strip().lower()
                    if user_response in ('y', 'n'):
                        break
                    else:
                        print("Response must be [Y|N].")
                if user_response == 'n':
                    break
            else:
                print("Verifying candidate details...")
                candidate_name = get_candidate_name(sid, students_file)
                name = input("Enter your full name as given during registration of the exam: ").strip()

                if name.lower() != candidate_name.lower():
                    print("Name does not match records.")
                    attempts += 1
                else:
                    print("Start exam...")
                    exam.assign_exam_to_candidate(sid)
                    exam.attempt_exam(sid)
                    break

        if attempts == 3:
            print("Contact the exam administrator to verify documents.")
        else:
            print("Exam completed. Your responses have been saved.")
    else:
        print("Error setting up the exam.")

if __name__ == "__main__":
    main(sys.argv)